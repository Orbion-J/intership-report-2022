sig absurd : (Zero) -> a
fun absurd(x) {
    switch ( x ) {}
}

# typename Maybe(a) = [| Nothing  | Just : a |]

sig assert_positive : (Int) {Fail:() => Zero|_}-> Int
fun assert_positive(x) {
    if (x>0) x else absurd(do Fail)
}

sig maybe : (() {Fail:() => Zero|e}~> a) -> () {Fail{_}|e}~> Maybe(a)
fun maybe(m) () {
    handle(m()) {
      case <Fail> -> Nothing
      case x -> Just(x)
    }
}

sig h2g2 : () {Fail:() => Zero|_}-> Int
fun h2g2 () {
    assert_positive( -6 * -7 )
}
sig h2g2' : () {Fail:() => Zero|_}-> Int
fun h2g2' () {
    assert_positive( -6 ) * -7
}

## drunk toss

typename Toss = [| Heads | Tail |] ;

sig toss : () {Choose:() => Bool|_}-> Toss
fun toss () {
    if (do Choose) Heads else Tail
}

sig drunkToss : () {Choose:() => Bool, Fail:() => Zero|_}-> Toss
fun drunkToss () {
    if (do Choose)
       toss ()
    else
        absurd(do Fail)
}

sig drunkTosses : (Int) -> () {Choose:() => Bool, Fail:() => Zero|_}~> [Toss]
fun drunkTosses (n) () {
    if (n<=0)
       []
    else
        drunkToss() :: drunkTosses (n-1) ()
}

# linear handler
sig h_true : (Comp(a,{Choose:Bool|e})) -> Comp(a,{Choose{_}|e})
fun h_true (m) () {
    handle (m()) {
        case <Choose => r> -> r(true)
    }
}

# non-linear handler
sig h_all : (Comp(a,{Choose:Bool|e})) -> Comp([a],{Choose{_}|e})
fun h_all (m) () {
    handle (m()) {
        case <Choose => r> -> r(true) ++ r(false)
        case x -> [x]
    }
}

## parameterised handlers
sig h_state : (a) -> (Comp(b,{ Get:()=>a, Put:(a)=>() |e })) ~> Comp((b,a), {Get{_}, Put{_}|e})
fun h_state (init) (m) () {
    handle (m()) (s <- init) {
        case x -> (x, s)
        case <Get => r> -> r (s, s)
        case <Put(s') => r> -> r ((), s')
    }
}

fun ex () {
    var x = do Get * 10 ;
    var x = 2*x + do Get ;
    do Put(x) ;
    ()
}

## pollution ex

sig receives : ([Int]) -> ( Comp(a, {Fail:Zero, Receive:Int |e}) ) -> Comp(a , {Fail:Zero, Receive{_}|e})
fun receives (ss) (h) () {
    handle (h()) (ss<-ss) {
        case <Receive => r> -> switch (ss) {
            case [] -> absurd(do Fail)
            case h::t -> r (h,t)
        }
        case x -> x
    }
}

fun not_too_big () {
    var x = do Receive ;
    if (x >= 42)
       absurd(do Fail)
    else x
}

typename Sized(a) = (val:Maybe(a), big:Bool) ;

sig solve_too_big : ( Comp(a, {Fail:Zero |e}) ) -> Comp(Sized(a), {Fail{_}|e})
fun solve_too_big (h) () {
    handle (h()) {
        case <Fail> -> (val=Nothing, big=true)
        case x      -> (val=Just(x), big=false)
    }
}

fun two   () { not_too_big () + not_too_big () }


## solving pollution

fresh `Fail {

    sig protect : (Comp(a, {`Fail:Zero, Fail:Zero | e})) -> Comp(a, {Fail{_}, `Fail:Zero|e})
    fun protect (m) () {
        handle (m()) {
            case <Fail => k>-> k (do `Fail)
        }
    }

    sig unprotect : (Comp(a, {`Fail:Zero, Fail:Zero | e})) -> Comp(a, {`Fail{_}, Fail:Zero|e})
    fun unprotect (m) () {
        handle (m()) {
            case <`Fail => k> -> k (do Fail)
        }
    }

    typename CNonLoc(a,e::Eff) = Comp(a, {Receive:Int, Fail:Zero, `Fail-    |e}) ;
    typename CLoc(a,e::Eff)    = Comp(a, {Receive:Int, Fail:Zero, `Fail:Zero|e}) ;

    sig protected_receives : ([Int]) -> (CNonLoc(a,{ |e})) -> Comp(Maybe(a), {Receive{_}, Fail:Zero, `Fail{_} |e})
    fun protected_receives (xs) (h) { unprotect ( maybe( receives ([xs]) ( protect ( h : CLoc(a,{ |e}) <- (CNonLoc(a,{ |e}))
    ) ) ) ) }

}
